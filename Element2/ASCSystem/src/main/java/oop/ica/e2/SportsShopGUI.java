package oop.ica.e2;


import java.util.ArrayList;
// Reads input from the user
import java.util.Scanner; 
//Packages for files
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.BufferedOutputStream;
import static java.nio.file.StandardOpenOption.*;
import java.nio.file.Path;
import java.nio.file.Files;
import java.nio.file.Paths;
//For logging errors
import java.util.logging.Level;
import java.util.logging.Logger;
//Packages for Images
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
//Packages for Swing GUI 
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableColumn;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author w9640628
 */

/** Sports Shop GUI JFrame  */
public class SportsShopGUI extends javax.swing.JFrame {
    
    private static final ArrayList<ASCStockItem> stockItemsList = new ArrayList<>(); //Global arrayList with ASCStockItems
    private static final String DELIMITER = ",";
    private static ASCTableModel ascModel;
    private String[] columnNames = new String[]{"Product Code","Title","Description","Price","Stock"};
    private static final ArrayList<BufferedImage> photoList = new ArrayList<>(); //Global arrayList of photos

    /**
     * Creates new form SportsShopGUI
     */
    public SportsShopGUI() {
        initComponents();
        
        //trying to load Asher's Sports Data and Teesside Skates Data
        try{
            loadASCData();
            loadTSData();
        }
        
        //Error displayed for file not found and IO exceptions 
        catch (FileNotFoundException e){
            System.out.println("Unable to open file " + e.getMessage() + "\n");
            System.exit(0);
        }
        
        catch (IOException e){
            System.out.println("File read error" + e.getMessage() + "\n");
            System.exit(0);
        }
        
        //if there are no items in the array list, the program will exit with a notification.
        if (stockItemsList.isEmpty()){
            JOptionPane.showMessageDialog(null, "No Stock","Data File is empty", JOptionPane.ERROR_MESSAGE);
            System.out.println("!!!!!Error: Unable to proceed");
            System.exit(0);
        }
        
        loadImages();
        
        // table model is created with table columns - column Names and ArrayList - stockItemsList
        ascModel = new ASCTableModel (columnNames , stockItemsList);
        
        // ascmodel is applied to the JTable
        ascStockItem.setModel(ascModel);
        
        
        for (int col = 0; col < ascStockItem.getColumnCount(); col++) {
            // current column
            TableColumn column = ascStockItem.getTableHeader().getColumnModel().getColumn(col);

            //set column header
            column.setHeaderValue(columnNames[col]);
        }
        


        // adding list selection listener to get the current selected row in the table
        ascStockItem.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            // the changed row can be tracked using the event
            public void valueChanged(ListSelectionEvent event) {
                
                int selectedRow = ascStockItem.getSelectedRow();
                ASCStockItem item = stockItemsList.get(selectedRow);
                
                // refreshes the table
                ascStockItem.repaint();
                
                displayImage(selectedRow);
                lowStockCheck(item);
                }
            });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buyButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ascStockItem = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        buyXButton = new javax.swing.JButton();
        addYButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        label = new javax.swing.JLabel();
        photoPanel = new javax.swing.JPanel();
        photoLabel = new javax.swing.JLabel();
        itemLabel = new javax.swing.JLabel();
        Title = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ashers's Sports Consortium");
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(255, 255, 255));

        buyButton.setBackground(new java.awt.Color(102, 153, 255));
        buyButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        buyButton.setForeground(new java.awt.Color(255, 255, 255));
        buyButton.setText("Buy");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        ascStockItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(ascStockItem);

        addButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        buyXButton.setBackground(new java.awt.Color(102, 153, 255));
        buyXButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        buyXButton.setForeground(new java.awt.Color(255, 255, 255));
        buyXButton.setText("BuyX");
        buyXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyXButtonActionPerformed(evt);
            }
        });

        addYButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addYButton.setText("AddY");
        addYButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addYButtonActionPerformed(evt);
            }
        });

        quitButton.setBackground(new java.awt.Color(255, 0, 51));
        quitButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        quitButton.setForeground(new java.awt.Color(255, 255, 255));
        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        label.setText("Item Photo");

        photoPanel.setBorder(javax.swing.BorderFactory.createLineBorder(null));

        photoLabel.setBorder(javax.swing.BorderFactory.createLineBorder(null));

        itemLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout photoPanelLayout = new javax.swing.GroupLayout(photoPanel);
        photoPanel.setLayout(photoPanelLayout);
        photoPanelLayout.setHorizontalGroup(
            photoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(photoPanelLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(photoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(itemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(photoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        photoPanelLayout.setVerticalGroup(
            photoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, photoPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(photoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Title.setBackground(new java.awt.Color(102, 153, 255));
        Title.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        Title.setForeground(new java.awt.Color(255, 255, 255));
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("ASHER'S SPORTS CONSORTIUM");
        Title.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 1020, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addButton)
                        .addGap(18, 18, 18)
                        .addComponent(buyXButton)
                        .addGap(18, 18, 18)
                        .addComponent(addYButton)
                        .addGap(18, 18, 18)
                        .addComponent(quitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(photoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(photoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyButton)
                    .addComponent(addButton)
                    .addComponent(buyXButton)
                    .addComponent(addYButton)
                    .addComponent(quitButton))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        // TODO add your handling code here:
        buyItems();
    }//GEN-LAST:event_buyButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        addStock();
    }//GEN-LAST:event_addButtonActionPerformed

    private void buyXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyXButtonActionPerformed
        // TODO add your handling code here:
        buyX();
    }//GEN-LAST:event_buyXButtonActionPerformed

    private void addYButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addYButtonActionPerformed
        // TODO add your handling code here:
        addY();
    }//GEN-LAST:event_addYButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        // TODO add your handling code here:
        try{
            saveData();
        }

        //If any exceptions are caught
        catch (FileNotFoundException e){
            System.out.println("Unable to open file" + e.getMessage() + "\n");
            System.exit(0);
        }

        catch (IOException e){
            System.out.println("File read error" + e.getMessage() + "\n");
            System.exit(0);
        }

        // Message dialogue when quit button is pressed
        JOptionPane.showMessageDialog(null , "Thank you for your visit." , "Quit" ,JOptionPane.INFORMATION_MESSAGE );
        System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SportsShopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SportsShopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SportsShopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SportsShopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SportsShopGUI().setVisible(true);
            }
        });
    }
    
    //Methods
    
    /** This method loads the ASC Stock Items data file */
    public static void loadASCData() throws IOException, FileNotFoundException{
        
        final String INPUT_FILE_PATH = "AsherSportsConsortium3.csv";
        File inputFile = new File(INPUT_FILE_PATH);
        Scanner fileScanner;
        
        if (inputFile.exists() && inputFile.isFile()){
            fileScanner = new Scanner(inputFile);
            
            //Loop until the file has lines
            while (fileScanner.hasNextLine()){
                
                // Removes irregular spacing
                String line = fileScanner.nextLine().trim();
                
                //seperating fields using Delimiter
                if (!line.isEmpty()){
                    String productCode = line.split(DELIMITER)[0];
                    String title = line.split(DELIMITER)[1];
                    String description = line.split(DELIMITER)[2];
                    int pounds = Integer.parseInt(line.split(DELIMITER)[3]);
                    int pence = Integer.parseInt(line.split(DELIMITER)[4]);
                    int quantity = Integer.parseInt(line.split(DELIMITER)[5]);
                    
                    // adding item to arrayList
                    stockItemsList.add(new ASCStockItem(productCode,title,description,pounds,pence,quantity));    
                }    
            }
            
            fileScanner.close();
        }
        
        //If no input file is present
        else if (!inputFile.exists()){
            throw new FileNotFoundException();
            
        }
        
    }
    
    /** This method loads the Teesside Skates Items data file */
    public static void loadTSData() throws IOException, FileNotFoundException{
        
        final String INPUT_FILE_PATH = "ts_products.txt";
        File inputFile = new File(INPUT_FILE_PATH);
        Scanner fileScanner;
        
        if (inputFile.exists() && inputFile.isFile()){
            fileScanner = new Scanner(inputFile);
            
            while (fileScanner.hasNextLine()){
                
                String line = fileScanner.nextLine().trim();
                
                if (!line.isEmpty()){
                    String skuNumber = line.split(DELIMITER)[0];
                    String make = line.split(DELIMITER)[1];
                    String model = line.split(DELIMITER)[2];
                    String color = line.split(DELIMITER)[3];
                    String notes = line.split(DELIMITER)[4];
                    double price = Double.parseDouble(line.split(DELIMITER)[5]);
                    int quantity = Integer.parseInt(line.split(DELIMITER)[6]);
                    
                    //Adds Items to the arrayList in ASCStockItem Format.
                    stockItemsList.add(new AdaptedTSProduct(skuNumber,make,model,color,notes,price,quantity));    
                }    
            }
            
            fileScanner.close();
        }
        
        else if (!inputFile.exists()){
            throw new FileNotFoundException();
            
        }
        
    }
    
    /** This method pre-loads the images, which will help images load faster */
    private void loadImages(){
        
        for (int index=0; index<stockItemsList.size(); index++){
            
            String filename = "photos/" + stockItemsList.get(index).getPhotoFilename();
            
            //buffered image object - set to null if loading fails
            BufferedImage image = null;
            
            //try to load image
            try {
                image = ImageIO.read(new File(filename));
            } catch (IOException e) {
                //log and report error - but no need to exit or return
                String message = "Unable to load image '" + filename + "'";
                Logger.getLogger(SportsShopGUI.class.getName()).log(Level.WARNING, null, message);
		System.err.println("\n\n!!!!! " + message + " !!!!!\n");               
            } finally {
                //add either loaded image or null to arraylist
                photoList.add(image);
            }
        }
    }
    
    /** This method displays the image */
    private void displayImage(int index){ //Here the index is the slected row of the jTable
        //clears previously set labels
        photoLabel.setText("");
        itemLabel.setText("");

        //get buffered image
        BufferedImage image = photoList.get(index);
        
        //checks for image
        if (image == null){
            //set text of label
            photoLabel.setText("Image not available.");
        } else {
            //set photolabel using photo array list
            photoLabel.setIcon( new ImageIcon( image ) );
            
            //set text of item label
            itemLabel.setText(stockItemsList.get(index).getTitle());
        }
    }
        
    /** This method checks for the items with low stock */
    public static void lowStockCheck(ASCStockItem item){
        
        if (item.getStock() < 5){
            //warning is diaplayed with number of items left.
            JOptionPane.showMessageDialog(null,item.getTitle() + " has only " + item.getStock() + " units of stock."
                    , "Low Stock Warning" , JOptionPane.WARNING_MESSAGE);
        }
        
    }
    
    /** This method helps users to buy the items */
    public static void buyItems(){
        
        int option;
        option = ascStockItem.getSelectedRow();
        
        if (option == -1){
            JOptionPane.showMessageDialog(null, "Please select an item from the table.","No item selected", JOptionPane.ERROR_MESSAGE);
            return; //exiting out from method.
        }
        
        ASCStockItem item = stockItemsList.get(option);
        
        //stops the decrementing counter when quantity reaches 0
        if (item.getStock()==0){
            JOptionPane.showMessageDialog(null, "Item out of stock","No sufficient items", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        item.setQuantity(item.getStock()-1);
        ascModel.setValueAt(item.getStock(),option,4);
        
        JOptionPane.showMessageDialog(null, "Item: "+ item.getTitle() + "\nPrice: £" + item.getPrice() 
                + "\nUnits bought: 1" + "\nStock remaining: "+ item.getStock(),"Confirmation of Sale", 
                JOptionPane.INFORMATION_MESSAGE);
        
        lowStockCheck(item);
        
    }
    
    /** This method add items to the stock */
    public static void addStock(){
        
        int option;
        option = ascStockItem.getSelectedRow();
        
        if (option == -1){
            JOptionPane.showMessageDialog(null, "Please select an item from the table.","No item selected", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        ASCStockItem item = stockItemsList.get(option);
        
        item.setQuantity(item.getStock()+1);
        ascModel.setValueAt(item.getStock(),option,4);
        
        JOptionPane.showMessageDialog(null, "Item: "+ item.getTitle() + "\nUnits Added: 1" 
                + "\nNew Quantity: "+ item.getStock(),"Item added successfully", 
                JOptionPane.INFORMATION_MESSAGE);
    }
    
    /** This method is used to buy multiple items */
    public static void buyX(){
        
        int row;
        // row is assigned to current selected row in the table.
        row = ascStockItem.getSelectedRow();
        
        // if no item is selected, Error message is displayed.
        if (row == -1){
            JOptionPane.showMessageDialog(null, "Please select an item from the table.","No item selected", 
            JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // arrayList is used to get the item(uisng the selected row)
        ASCStockItem item = stockItemsList.get(row);
        
        if (item.getStock()==0){
            JOptionPane.showMessageDialog(null, "Item out of stock","No sufficient items", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //Input dialogue range
        Integer [] options = new Integer[ item.getStock() ]; 
        for (int index = 1; index <= item.getStock(); index++)
        {
        options [index - 1] = index; 

        }
        
        //message popup to select the number of items to buy
        Object inputString = JOptionPane.showInputDialog( null, "Please select a value","Buy multiple items"
                , JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (inputString == null){
            //do nothing
        }
        
        else{
            int selectedOption = (Integer)inputString;
        
            //updating the stock quanitiy in the arraylist
            item.setQuantity(item.getStock() - selectedOption);
        
            //updating the stock quanitiy in the jTable at column 4
            ascModel.setValueAt(item.getStock() , row , 4);
        
            //Confirmation is displayed
            JOptionPane.showMessageDialog(null, "Item: "+ item.getTitle() 
                + "\nUnits bought: " + selectedOption + "\nStock remaining: "+ item.getStock(),"Confirmation of Sale", 
                JOptionPane.INFORMATION_MESSAGE);
        
        
            //checks for low stock
            lowStockCheck(item);
        }
    }
    
    /** This method is used to adds multiple items */
    public static void addY(){
        
        // row is assigned to current selected row in the table.
        int row;
        row = ascStockItem.getSelectedRow();
        
        // if no item is selected, Error message is displayed
        if (row == -1){
            JOptionPane.showMessageDialog(null, "Please select an item from the table.","No item selected", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        ASCStockItem item = stockItemsList.get(row);
        
        //Input dialogue range
        Integer [] options = new Integer[ 6 ]; 
        
        for (int index = 5; index <= 10; index++)
        {
        options [index - 5] = index; 

        }
        
        //message popup to select the number of items to add
        Object inputString = JOptionPane.showInputDialog( null, "Please select a value","Add multiple items."
                , JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        
        if (inputString == null){
            //do nothing
        }
        
        else{
            
            int selectedOption = (Integer)inputString;
        
            //Updating the value in arrayList and JTable.
            item.setQuantity(item.getStock() + selectedOption);
            ascModel.setValueAt(item.getStock() , row , 4);
        
            //Notification is displayed after adding the items
            JOptionPane.showMessageDialog(null, "Item: "+ item.getTitle() 
                + "\nUnits Added: " + selectedOption + "\nNew quantity: "+ item.getStock(),"Items added successfully.", 
                JOptionPane.INFORMATION_MESSAGE);
        
        }
    }
    
    /**This method saves the data to an output file asc_output.txt */
    public static void saveData() throws IOException,FileNotFoundException {
        
        final String OUTPUT_FILE_PATH = "asc_output.txt";
        
        Path path = Paths.get(OUTPUT_FILE_PATH);
        
        //delete the output file if it already exist
        Files.deleteIfExists(path); 
        
        // a new buffered output stream that writes to a file at the path. 
        //If the file does not exist, it will be created
        BufferedOutputStream buffer;
        buffer = new BufferedOutputStream(
                Files.newOutputStream(path,CREATE,WRITE));
        
        //append the fields to the item
        String item="";
        
        for (ASCStockItem i : stockItemsList){
            item += i.getStockCode() + DELIMITER;
            item += i.getTitle() + DELIMITER;
            item += i.getDescription() + DELIMITER;
            item += i.getPounds() + DELIMITER;
            item += i.getPence() + DELIMITER;
            item += i.getStock() + "\n";
        }
        
        byte data[] = item.getBytes();
        
        //writes the data
        buffer.write(data,0,data.length);
        buffer.close();
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Title;
    private javax.swing.JButton addButton;
    private javax.swing.JButton addYButton;
    private static javax.swing.JTable ascStockItem;
    private javax.swing.JButton buyButton;
    private javax.swing.JButton buyXButton;
    private static javax.swing.JLabel itemLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label;
    private static javax.swing.JLabel photoLabel;
    private javax.swing.JPanel photoPanel;
    private javax.swing.JButton quitButton;
    // End of variables declaration//GEN-END:variables
}
